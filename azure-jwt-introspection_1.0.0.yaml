swagger: '2.0'
info:
  title: azure-jwt-introspection
  x-ibm-name: azure-jwt-introspection
  version: 1.0.0
x-ibm-configuration:
  cors:
    enabled: true
  gateway: datapower-api-gateway
  type: rest
  phase: realized
  enforced: true
  testable: true
  assembly:
    execute:
      - gatewayscript:
          version: 2.0.0
          title: jwt-retrieve-and-decode
          source: "console.log('**** Running jwt-retrieve-and-decode ****');\r\n\r\n/* For APIC 3rd party OAuth, the token is sent to this introspection api via a query parameter named token, \r\ntherefore we retrieve the token from the query param, and set it as the authorization header.\r\nAlthough, if the authorization header contains the token without it being in the query param, it would still work.*/\r\nvar vTokenParameter = JSON.stringify(context.get('request.parameters.token.values[0]'));\r\nif (vTokenParameter != null){\r\n    var vToken = 'Bearer ' + JSON.stringify(context.get('request.parameters.token.values[0]')).replace (/\"/g,'');\r\n    console.log('****request.parameters.token: ' + vToken);\r\n    context.set('message.headers.authorization', vToken);\r\n}\r\n\r\n// Get the Authorizaation header.\r\nvar vAuthHeader = JSON.stringify(context.get('message.headers.authorization'));\r\n\r\n// If Authorization header is not there, throw error.\r\nif (vAuthHeader == null) {\r\n    context.reject('MissingAuthorizationHeader', 'Authorization header is not found or is empty.');\r\n    context.message.statusCode = '401 Unauthorized';\r\n}\r\n\r\n// Remove Bearer prefix from Auth header.\r\nvar vBase64TokenWithoutBearer = (context.get('message.headers.authorization').split(' ').pop());\r\nconsole.log('****message.headers.Authorization (bearer removed): ' + vBase64TokenWithoutBearer);\r\n\r\n// Function to decode the JWT.\r\nfunction decodeJwt(token) {\r\n    // JWT Header section\r\n    var vBase64JWTHeader = token.split(\".\")[0];\r\n    console.log('****vJWTHeader: ' + Buffer.from(vBase64JWTHeader, \"base64\"));\r\n  \r\n    // JWT Payload section\r\n    var vBase64JWTPayload = token.split(\".\")[1];\r\n    console.log('****vJWTPayload: ' + Buffer.from(vBase64JWTPayload, \"base64\"));\r\n \r\n    var vJWTHeader = Buffer.from(vBase64JWTHeader, \"base64\");\r\n    var vJWTPayload = Buffer.from(vBase64JWTPayload, \"base64\");\r\n    \r\n    var vJWTDecoded = '{\"Header\":[' + vJWTHeader + '], \"Payload\": [' + vJWTPayload + ']}';\r\n    \r\n    return JSON.parse(vJWTDecoded.toString());\r\n}\r\n\r\n// Set the decoded JWT from the function output to APIC context var to be used downstream.\r\nvar vDecodedJWT = decodeJwt(vBase64TokenWithoutBearer);\r\ncontext.set('decodedjwt', vDecodedJWT);\r\n\r\nconsole.log('****Completed jwt-retrieve-and-decode. Next invoking MS Key Store: ' + context.get('api.properties.ms-key-store-url') + ' ****');\r\n\r\n\r\n\r\n"
      - invoke:
          version: 2.2.0
          title: invoke-azure-key-store
          backend-type: detect
          header-control:
            type: blocklist
            values: []
          parameter-control:
            type: allowlist
            values: []
          http-version: HTTP/1.1
          timeout: 60
          verb: GET
          chunked-uploads: true
          persistent-connection: true
          cache-response: protocol
          cache-ttl: 900
          stop-on-error:
            - ConnectionError
            - SOAPError
            - OperationError
          websocket-upgrade: false
          target-url: $(ms-key-store-url)
          output: ms-keyids
      - gatewayscript:
          version: 2.0.0
          title: Introspect MS-Key-Store
          source: >
            console.log('**** Running Introspect-MS-Key-Store ****')


            // Get the KID from the token.

            var vDecodedJWT = context.get('decodedjwt');

            var vKIDinToken = vDecodedJWT.Header[0].kid;

            console.log('****vKIDinToken: ' + vKIDinToken);


            // Get the MS Azure key list from the previous invoke policy.

            var vMSKeyIDs = JSON.parse(context.get('ms-keyids.body'));

            console.log('****vMSKeyIDs: ' + JSON.stringify(vMSKeyIDs));


            // Iterate through all the keys to find matching kid.

            var vJWK;

            for (var i=0; i < vMSKeyIDs.keys.length; i++){
                if(vKIDinToken == vMSKeyIDs.keys[i].kid){
                    vJWK = vMSKeyIDs.keys[i];
                    break;
                }
            }

            console.log('****vJWK: ' + JSON.stringify(vJWK))


            // Set the public jwk which list of keys matched the kid, to be used
            to validate the JWT in the jwt-validate policy downstream.

            context.set('vJWK', JSON.stringify(vJWK));
      - jwt-validate:
          version: 2.0.0
          title: jwt-validate
          jwt: message.headers.authorization
          output-claims: decoded.claims
          jws-jwk: vJWK
          jwe-jwk: ''
          jws-crypto: ''
          jwe-crypto: ''
      - gatewayscript:
          version: 2.0.0
          title: Introspection-Response
          source: >-
            // Get and set the decoded claims from jwt-validate.

            var vDecodedClaim =  context.get('decoded.claims');

            console.log('****OriginalDecodedClaim: ' +
            JSON.stringify(vDecodedClaim));


            // Add {"active":true} element in payload for oauth introspection.

            vDecodedClaim['active'] = true;


            // Replace the 'scp' syntax to 'scope' in payload for the APIC 3rd
            Party OAuth to introspect.

            var vDecodedClaim = JSON.stringify(vDecodedClaim).replace(/scp/g,
            'scope');



            // Log response going back to the APIC 3rd Party OAuth Provider.

            console.log('****vDecodedClaimFinal: ' + vDecodedClaim);

            context.set('message.body', vDecodedClaim);

            context.message.header.set('content-type', 'application/json');
    catch:
      - errors:
          - RuntimeError
        execute:
          - gatewayscript:
              version: 2.0.0
              title: JWT-Error-Response
              source: >-
                var vJwtError = JSON.stringify(context.get('error'));


                // There could be other errors other than JWT related failures,
                therefore, when there is JWT failure, then set JWT errors,
                otherwise pass the other errors through as they are.

                if (vJwtError.includes('JWT validation failed'))

                {
                    console.log('****jwt-validate.error-message: ' + JSON.stringify(context.get('jwt-validate')));
                    console.log('****error-message: ' + JSON.stringify(context.get('error')));
                    context.set('message.status.code', 401);
                    context.set('message.body', context.get('jwt-validate.error-message'));
                    context.set('message.status.reason', context.get('jwt-validate.error-message'));
                }

                context.message.header.set('content-type', 'application/json');
  properties:
    ms-key-store-url:
      value: https://login.microsoftonline.com/common/discovery/v2.0/keys
  activity-log:
    enabled: true
    success-content: activity
    error-content: payload
  catalogs: {}
basePath: /jwt-introspection-validation
paths:
  /:
    get:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    put:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    post:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    delete:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    head:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    patch:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    parameters: []
securityDefinitions:
  clientID:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
security: []
schemes:
  - https
